I already hate Github and I'm summarizing this fast
Git Bash wouldn't run git clone 'website'
so I don't remember the exact error{believe it was b/c I had Git Bash on D: instead of C:} but I ended up just deleting Git{my intention was for GitBash; but it can't just be updated only Git ??}
    I used a website but of course believe I X'ed out of it but I used - Windows Key > Control Panel > PROGRAMS: *click >* Uninstall a program > {Find Git} right click on Git > *click* uninstall

and then I downloaded the newest one
https://medium.com/@botdotcom/learn-how-to-install-and-use-git-on-windows-9deecbd6f126
    Git for Windows v2.39.1
    >>file:///C:/Program%20Files%20(x86)/Git/ReleaseNotes.html

!!!!!!!!!!! NOTE: In Git Bash app/command line here on VSCode, I don't believe you do "cd C:\blah\.." instead; pretty sure it's "cd /c/blah/.."

once downloaded I 1st realized I had MinGW32 on Program Files(x86) when it's normally MinGW64... also thought why not on Program Files{both on C:}
anyways got this error
https://github.com/scalingexcellence/scrapybook/issues/36
and noticed my CAfile read "CAfile: D:\Program Files\Git\mingw64/bin/curl-ca-bundle.crt"
the issue was that I'm pretty sure that was the Git folder I had just deleted... so knew Path was pointing to nothing {as there wasnt even a Git file in D:\Program Files\Git} 
so 1st and foremost made sure my credentials/Github account was still incorporarated with Gitbash by "git config -l"
https://stackoverflow.com/questions/37398524/how-do-i-check-my-github-settings-or-who-im-signed-in-as-on-my-current-project
and then tried to do make the change from the CML but could LUCKILY *VonC* is an absolute baller and reccommended I just add
an environment variable so clicked the 'New' in 'System Variables' and added the 'Variable Name' "GIT_SSL_CAINFO" with the 'Variable Value' = to "C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt"
NOTE: I chose to just use the MinGW64 in Program Files instead of (x86) b/c the 64 might've had my credentials saved when the other might not have since it was new 
https://stackoverflow.com/questions/22893203/how-to-specify-cafile-path-inline-with-the-git-command


Not that the end result is helpful but lol here
user@TrR MINGW64 ~/OneDrive/Documents/GitHub/FFC/Backend
$ git clone https://github.com/freeCodeCamp/boilerplate-express.git
Cloning into 'boilerplate-express'...
remote: Enumerating objects: 64, done.
Receivingotal 64 (delta 0), reused 0 (delta 0), pack-reused 64 eceiving objects:  46% (30/64)
Receiving objects: 100% (64/64), 27.54 KiB | 1.53 MiB/s, done.
Resolving deltas: 100% (15/15), done.

user@TrR MINGW64 ~/OneDrive/Documents/GitHub/FFC/Backend



NOTE: Another side note was I did the 'npm run start' "thing" in the Backend folder and it worked but kinda got an error message. So I was supposed to do that in the boilerplate folder!!! Running any
JS file didn't work until I added npm to the folder in which the code belonged to{boilerplate}!!! 





NOTES:      {pretty sure these are helpful/used -> unhelpful/glanced at}
https://www.simplilearn.com/tutorials/git-tutorial/git-installation-on-windows

    I read something that I had to pick either MinGW or something else and believe these may have been the other options
https://cygwin.com/install.html
https://www.msys2.org/


https://stackoverflow.com/questions/7000524/changing-mingw-startup-directory-or-creating-mingw-symlinks
https://superuser.com/questions/1260587/how-to-disable-git-bash-daily-updates-checking
https://stackoverflow.com/questions/45778066/threadscopes-gettext-sh-file-interferes-with-git-on-windows/45779657#45779657
https://www.youtube.com/watch?v=NFM7uiSMUAs
https://github.com/git-for-windows/build-extra/blob/main/git-extra/git-update-git-for-windows
https://github.com/SickChill/sickchill/issues/5697
    When downloading new Git using this thing{Vim} was an option but everyone said No! so I chose VSCode && the following links were options of how to setup GitBash!!!
https://www.vim.org/
https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/
https://stackoverflow.com/questions/62456484/whats-the-difference-between-openssl-and-the-native-windows-secure-channel-libr        <-this may have led to the error after new Git download but I have no clue???
https://github.com/git-for-windows/git/discussions/3251



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    IF RUNNING A "git ...." COMMAND AND YOU ARE PRESSING 'ENTER' FOREVER => TO EXIT JUST PRESS == Q
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!




<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    GENERAL NOTES:
https://www.cloudflare.com/learning/serverless/glossary/client-side-vs-server-side/
https://expressjs.com/en/starter/basic-routing.html
    https://www.tutorialspoint.com/expressjs/expressjs_routing.htm < Think above may be better!!
https://www.networkstraining.com/different-types-of-servers/
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>









@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Basic Node and Express:
Node.js is a JavaScript runtime that allows developers to write backend (server-side) programs in JavaScript. Node.js comes with
a handful of built-in modules — small, independent programs — that help with this. Some of the core modules include HTTP and File System.
    module — small, independent programs
    HTTP - acts like a server
    File System - a module to read and modify files
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@





$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
MAIN POINTS:
A middleware needs to be mounted using the method app.use(path, middlewareFunction). The first path argument is optional. If you don’t
pass it, the middleware will be executed for all requests.
    -app.use("1parameter") == no 1st agrument means => responds to all requests
    -app.get("/", *example*) == 1st parameter ?root path on server??{worded this way because of FFC #3 PATH definition}?
    FCC -app.use(<mware-function>) == this method mounts a middleware function at root level and the function will be executed for all the requests

While an HTML server serves HTML, an API serves data. A REST (REpresentational State Transfer) API allows data exchange. The client only
needs to know where the resource is (the URL), and utilize an HTTP method.

res.json() - passing in an object as an argument. This method closes the request-response loop, returning the data.

.env - this file is a hidden file that is used to pass environment variables to your application. NO ONE ACCESSES!! {???idk environment variables are???}
It's also a shell file, so you don’t need to wrap names or values in quotes. That also means no spaces between =!!!!
    -??I believe environment variables go in .env file; which is shell, so look like this [VAR_NAME=value] and they are ?accessible from the app? by using
    [process.env.VAR_NAME] and variables are passed as ?strings?. FOR THIS TO WORK... the dotenv package needs to be installed, and should go in the
    project's package.json file. At the top of your myApp.js file, add   require('dotenv').config()   to load the environment variables. The dotenv package
    loads the environment variables from your .env file into process.env. ??

Middleware functions are functions that take 3 arguments: the request object, the response object, and the next function in the application’s
request-response cycle. These functions execute some code that can have side effects on the app, and usually add information to the request or response
objects. They can also end the cycle by sending a response when some condition is met. If they don’t send the response when they are done, they start the
execution of the next function in the stack. This triggers calling the 3rd argument, next().

Express evaluates functions in the order they appear in the code. This is true for middleware too. If you want it to work for all the routes, it should
be mounted before them. {Express evaluates routes from top to bottom}

Middleware can be mounted at a specific route using app.METHOD(path, middlewareFunction) and even chained app.METHOD(path, middlewareFunction1, middlewareFunction2)

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Q:
FCC #4:How does the middleware intercept the route handlers? {Couldn't this be reworded to intercepts the route and then messes with the handler function?!?!?!}
express.static() => this f(n) sets "static" assets from public folder & serves them? | app.use() => mounts middleware? {BUT in FCC #7 it says app.post() is ok????} | ... & then you can chain middleware?











--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



#COMMENT: https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-start-a-working-express-server/301519
Also the way they worded this was crappy I think b/c aren't I using Express to make the "Hello Express" appear and then
using Node to run the ?whole app? !?!?!?


FCC #2  Start a Working Express Server

In the first two lines of the file myApp.js, you can see how easy it is to create an Express app object. This object has several methods, and
you will learn many of them in these challenges. One fundamental method is app.listen(port). It tells your server to listen on a given port, putting
it in running state. For testing reasons, we need the app to be running in the background so we added this method in the server.js file for you.

Let’s serve our first string! In Express, routes takes the following structure: app.METHOD(PATH, HANDLER). METHOD is an http method in lowercase. PATH
is a relative path on the server (it can be a string, or even a regular expression). HANDLER is a function that Express calls when the route is
matched. Handlers take the form function(req, res) {...}, where req is the request object, and res is the response object. For example, the handler

    function(req, res) {
    res.send('Response String');
    }

will serve the string 'Response String'.
--------------------------------------------------------


Server wouldn't work????... I assume because all that came up was the console log and not the

> start
> node server.js

Node.js listening on port 3000



https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction
https://www.tutorialspoint.com/expressjs/expressjs_static_files.htm
*?https://www.freecodecamp.org/news/express-explained-with-examples-installation-routing-middleware-and-more/?*
https://stackoverflow.com/questions/29116292/unable-to-launch-the-iis-express-web-server-in-visual-studio/66290952#66290952
https://dev.to/equuscaballus/something-is-already-running-on-port-3000-bpf
https://stackoverflow.com/questions/48198/how-do-i-find-out-which-process-is-listening-on-a-tcp-or-udp-port-on-windows

PS C:\Users\user> netstat -a -b

Active Connections

  Proto  Local Address          Foreign Address        State
  TCP    0.0.0.0:135            TriangularReflex:0     LISTENING
  RpcSs
 [svchost.exe]
  TCP    0.0.0.0:445            TriangularReflex:0     LISTENING
 Can not obtain ownership information
  TCP    0.0.0.0:3306           TriangularReflex:0     LISTENING
 [mysqld.exe]
  TCP    0.0.0.0:5040           TriangularReflex:0     LISTENING
  CDPSvc
 [svchost.exe]
  TCP    0.0.0.0:5357           TriangularReflex:0     LISTENING
 Can not obtain ownership information
  TCP    0.0.0.0:5426           TriangularReflex:0     LISTENING
 Can not obtain ownership information
  TCP    0.0.0.0:5432           TriangularReflex:0     LISTENING
 [postgres.exe]
  TCP    0.0.0.0:8080           TriangularReflex:0     LISTENING
 [httpd.exe]
  TCP    0.0.0.0:8828           TriangularReflex:0     LISTENING
 [Code.exe]
  TCP    0.0.0.0:8829           TriangularReflex:0     LISTENING
 [Code.exe]
  TCP    0.0.0.0:8830           TriangularReflex:0     LISTENING
 [Code.exe]
  TCP    0.0.0.0:17500          TriangularReflex:0     LISTENING
 [Dropbox.exe]
  TCP    0.0.0.0:33060          TriangularReflex:0     LISTENING
 [mysqld.exe]
  TCP    0.0.0.0:49664          TriangularReflex:0     LISTENING
 [lsass.exe]
  TCP    0.0.0.0:49665          TriangularReflex:0     LISTENING
 Can not obtain ownership information
  TCP    0.0.0.0:49666          TriangularReflex:0     LISTENING
  EventLog
 [svchost.exe]
  TCP    0.0.0.0:49667          TriangularReflex:0     LISTENING
  Schedule
 [svchost.exe]
  TCP    0.0.0.0:49679          TriangularReflex:0     LISTENING
 Can not obtain ownership information
  TCP    0.0.0.0:54235          TriangularReflex:0     LISTENING
 Can not obtain ownership information
  TCP    0.0.0.0:54236          TriangularReflex:0     LISTENING
 Can not obtain ownership information
  TCP    0.0.0.0:54557          TriangularReflex:0     LISTENING
 [spoolsv.exe]
  TCP    127.0.0.1:843          TriangularReflex:0     LISTENING
 [Dropbox.exe]
  TCP    127.0.0.1:1337         TriangularReflex:0     LISTENING
 [RzSDKServer.exe]
  TCP    127.0.0.1:6432         TriangularReflex:0     LISTENING
 [pgbouncer.exe]
  TCP    127.0.0.1:13339        TriangularReflex:0     LISTENING
 [RzSDKServer.exe]
  TCP    127.0.0.1:13340        TriangularReflex:0     LISTENING
 [RzChromaStreamServer.exe]
  TCP    127.0.0.1:17600        TriangularReflex:0     LISTENING
 [Dropbox.exe]
  TCP    127.0.0.1:49671        TriangularReflex:49672  ESTABLISHED

------------------------------------------------------------------------------------

PS C:\Users\user> netstat -a -b -n

Active Connections

  Proto  Local Address          Foreign Address        State
  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING
  RpcSs
 [svchost.exe]
  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING
 Can not obtain ownership information
  TCP    0.0.0.0:3306           0.0.0.0:0              LISTENING
 [mysqld.exe]
  TCP    0.0.0.0:5040           0.0.0.0:0              LISTENING
  CDPSvc
 [svchost.exe]
  TCP    0.0.0.0:5357           0.0.0.0:0              LISTENING
 Can not obtain ownership information
  TCP    0.0.0.0:5426           0.0.0.0:0              LISTENING
 Can not obtain ownership information
  TCP    0.0.0.0:5432           0.0.0.0:0              LISTENING
 [postgres.exe]
  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING
 [httpd.exe]
  TCP    0.0.0.0:8828           0.0.0.0:0              LISTENING
 [Code.exe]
  TCP    0.0.0.0:8829           0.0.0.0:0              LISTENING
 [Code.exe]
  TCP    0.0.0.0:8830           0.0.0.0:0              LISTENING
 [Code.exe]
  TCP    0.0.0.0:17500          0.0.0.0:0              LISTENING
 [Dropbox.exe]
  TCP    0.0.0.0:33060          0.0.0.0:0              LISTENING






I was doing:
    >node myApp.js
I guess this ?only? runs the Javascript file and not the ?whole code? ?????
so you run the npm again which I do not understand because I thought that only added packages??
    >npm run start
NOTE:This also means all the above was for nothing I'm pretty sure?!?!?!

How the terminal looked!! Also the Hello Express showed up in the browser.{WHEN I USED "" lol BUT with '' it didn't show up anywhere!}


        *
        *
        Terminate batch job (Y/N)? y
        PS C:\Users\user\OneDrive\Documents\GitHub\FFC\Backend\boilerplate-express> npm run start

        > fcc-learn-node-with-express@0.1.0 start
        > node server.js

        Hello World
        Node is listening on port 3000...
        *
        *
        https://www.freecodecamp.org





===============================================================================
SLOWED DOWN PROMPT EXPLANATION       WITH ANSWER WALKTHROUGH:

Use the app.get() method
app.get()

to serve
app.get( , () => { *somethingHere* })   <- ?maybe implies res.send()? also HANDLER f(n)? added f(n) but idk????

the string "Hello Express" 
app.get( , () => { "Hello Express" })

to GET requests
app.get( , () => { "Hello Express" })
    ^HTTP method GET request

matching the "/" (ROOT) path
app.get("/", () => { "Hello Express" })






--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
app.METHOD(PATH, HANDLER)


FCC #3  Serve an HTML File

You can respond to requests with a file using the res.sendFile(path) method. You can put it inside the app.get('/', ...) route handler. Behind the scenes, this method
will set the appropriate headers to instruct your browser on how to handle the file you want to send, according to its type. Then it will read and send the file. This
method needs an absolute file path. We recommend you to use the Node global variable _ _dirname to calculate the path like this:

    absolutePath = __dirname + relativePath/file.ext

Note: You can edit the solution of the previous challenge or create a new one. If you create a new solution, keep in mind that Express evaluates routes from top to
bottom, and executes the handler for the first match. You have to comment out the preceding solution, or the server will keep responding with a string.

NOTE !IMPORTANT! NOTE: ^They reffered to the    app.get('/', ...)   "..." part as "Route Handler"   {MY RETURN: app.HTTPMethods(PATH, HANDLER) == route | app.HTTPMethods(PATH, ""HANDLER"") == the ""HANDLER""}
NOTE: ALSO for "res.sendFile(path)" the dumb 'path' keyword here is what they were reffering is called the 'absolute file path'!!! NOT the 1st parameter in http method!!!! 
      AND FINALLY these fools didn't mean the code as code... instead they should've wrote "absolutePath => __dirname + relativePath/file.ext"{they meant absPath is just
      the same/equal to the rest | absolutePath is just a variable name}
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
MY RETURN:
Regarding FCC's Note:, I have no clue why they brought up making another file because ONLY if you make a new file that comes BEFORE the older file AND !that file doesn't contain the
previous question's answer! you don't have to worry about commenting!!!? | Basically the code better be 1st route in line for compiling, otherwise your commenting out anything in your way or
moving the code to the front!!
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$




FCC Answer:

Serve an HTML File 307
Problem Explanation

You probably need to comment out the last challenge. If you have a website and want to serve an index.html file you probably want to put this in a public folder. This is
to ensure the public doesn’t see something you dont want them to, and it sometimes is called “public” or “views,” but you can technically call it whatever you want.

To serve an index.html in a folder called “public” at the root domain you would do so like this:

    app.get("/", function(req, res) {
    res.sendFile(__dirname + "/public/index.html");
    });

Note: __dirname returns the root directory is a best practice for node developers.


#NOTE:They said,
    [To serve an index.html in a folder called “public” at the root domain you would do so like this]
    ssoooooo this seems to be the way we get the index.html file to the user!!!     Where it is stored or comes from I have absolutely no clue??

#QUESTION:
    Why is _ _dirname not in quotes and show is that math allowed?????


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
MY RETURN:
In FCC Answer when the said "EDIT THE LAST SOLUTION" means you REWRITE the code to match your new solution!! And if you "create a new solution" that means you left the previous
solution alone and are adding the answer to current question below the pervious solution. Doofus!!
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$





--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
app.METHOD(PATH, HANDLER)



FCC #4 Serve Static Assets

An HTML server usually has one or more directories that are accessible by the user. You can place there the static assets needed by your application (stylesheets, scripts, images).

In Express, you can put in place this functionality using the middleware express.static(path), where the path parameter is the absolute path of the folder containing the assets.

If you don’t know what middleware is... don’t worry, we will discuss in detail later. Basically, middleware are functions that intercept route handlers, adding some kind of
information. A middleware needs to be mounted using the method app.use(path, middlewareFunction). The first path argument is optional. If you don’t pass it, the middleware will
be executed for all requests.
...
Now your app should be able to serve a CSS stylesheet. Note that the /public/style.css file is referenced in the /views/index.html in the project boilerplate. Your front-page
should look a little better now!





I didn't use this but hint has a great explanation about things!!!      https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-serve-static-assets/301518
ANWSER:
Serve Static Assets

Serving static webpages and assets is fairly simple with express. This could be useful for building your own portfolio website or blog, single-page web applications etc.

To serve static assets from the public folder you can use the express.static() method as the middleware. This method takes the endpoint and the absolute path to the directory
containing the static assets as arguments and exposes the files in that folder at the given endpoint. By default, if the endpoint is not passed to the method, the folder is
exposed at the root endpoint i.e. / for the application.

The __dirname variable is a string containing the absolute path to the root of your project which has to be concatenated with the folder containing the assets.

Add the following line to your file above all defined routes to achieve the desired result:

    // Normal usage
    app.use(express.static(__dirname + "/public"));

    // Assets at the /public route
    app.use("/public", express.static(__dirname + "/public"));

https://expressjs.com/en/starter/static-files.html






--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
app.METHOD(PATH, HANDLER)



NOTE: When this explanation mentions "the verb", I believe this is what they meant!  =>  "This METHOD can be applied to any one of the HTTP verbs – get, set, put, delete."
    and I got that defintion from here!!!   https://www.tutorialspoint.com/expressjs/expressjs_routing.htm


FCC #5   Serve JSON on a Specific Route

While an HTML server serves HTML, an API serves data. A REST (REpresentational State Transfer) API allows data exchange in a simple way, without the need for clients to know any detail
about the server. The client only needs to know where the resource is (the URL), and the action it wants to perform on it (the verb). The GET verb is used when you are fetching some
information, without modifying anything. These days, the preferred data format for moving information around the web is JSON. Simply put, JSON is a convenient way to represent a JavaScript
object as a string, so it can be easily transmitted.

Let's create a simple API by creating a route that responds with JSON at the path /json. You can do it as usual, with the app.get() method. Inside the route handler, use the method
res.json(), passing in an object as an argument. This method closes the request-response loop, returning the data. Behind the scenes, it converts a valid JavaScript object into a string,
then sets the appropriate headers to tell your browser that you are serving JSON, and sends the data back. A valid object has the usual structure {key: data}. data can be a number, a string,
a nested object or an array. data can also be a variable or the result of a function call, in which case it will be evaluated before being converted into a string.





$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
MY RETURN:
READ Paragraph2 like this:
Let's create a simple API            by creating a route              that responds with JSON               at the path /json.
    -?????So fairly certain an API == the route, everything in between{mounting}, and the endpoint????? {Basically anytime the user needs ANY DATA thats the api!?!? seems like IT{the API} is
    more of a structure of code that's purpose is to accomadates to anything from the accordingly | Ex. initial visit => api = send user html,css, json / *cricket* => api = listening... waiting
    for user to click something or type or anything / user clicks = api => send React click effect -> user clicked "job openings" => api = {?maybe that info comes later after click BUT while
    api is still sending click effect?} ope ok people "job openings" request, so mount getLocation so we are able to reccommend the user job openings closest to them, also mount error handling
    which checks if the browser is even capable of running getLocation which organizes all that data accordingly AND checks the number of objects the browser can even handle on 1 page so we
    can 'send a good amount that the browser is capable of handling'{optimization} => great we've arrived at folder job openings send everything to user:Steven Siegal}
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$








--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
app.METHOD(PATH, HANDLER)



FCC #6  Use the .env File

The .env file is a hidden file that is used to pass environment variables to your application. This file is secret, no one but you can access it, and it can be used to store data that you
want to keep private or hidden. For example, you can store API keys from external services or your database URI. You can also use it to store configuration options. By setting configuration
options, you can change the behavior of your application, without the need to rewrite some code.

The environment variables are accessible from the app as process.env.VAR_NAME. The process.env object is a global Node object, and variables are passed as strings. By convention, the variable
names are all uppercase, with words separated by an underscore. The .env is a shell file, so you don’t need to wrap names or values in quotes. It is also important to note that there cannot be
space around the equals sign when you are assigning values to your variables, e.g. VAR_NAME=value. Usually, you will put each variable definition on a separate line.





How to Create and Delete a File in PowerShell{a.k.a. Terminal in VSCode!!!}
https://www.tutorialspoint.com/powershell/powershell_files_delete_files.htm
NOTE:Also, fairly certain that PS before the drives stands for PowerShell!!!

PS C:\Users\user\OneDrive\Documents\GitHub\FFC\Backend\boilerplate-express> New-Item pShelly.txt -ItemType File


    Directory: C:\Users\user\OneDrive\Documents\GitHub\FFC\Backend\boilerplate-express


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----         1/29/2023   3:59 PM              0 pShelly.txt


PS C:\Users\user\OneDrive\Documents\GitHub\FFC\Backend\boilerplate-express> Remove-Item pShelly.txt            
PS C:\Users\user\OneDrive\Documents\GitHub\FFC\Backend\boilerplate-express> 





FCC NOTE:
If you are working locally, you will need the dotenv package. It loads environment variables from your .env file into process.env. The dotenv package has already been installed, and is in
your project's package.json file. At the top of your myApp.js file, add require('dotenv').config() to load the environment variables.






--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
app.METHOD(PATH, HANDLER)



FCC #7  Implement a Root-Level Request Logger Middleware

Earlier, you were introduced to the express.static() middleware function. Now it’s time to see what middleware is, in more detail. Middleware functions are functions that take 3 arguments: the
request object, the response object, and the next function in the application’s request-response cycle. These functions execute some code that can have side effects on the app, and usually add
information to the request or response objects. They can also end the cycle by sending a response when some condition is met. If they don’t send the response when they are done, they start the
execution of the next function in the stack. This triggers calling the 3rd argument, next().

Look at the following example:

    function(req, res, next) {
    console.log("I'm a middleware...");
    next();
    }

Let’s suppose you mounted this function on a route. When a request matches the route, it displays the string “I’m a middleware…”, then it executes the next function in the stack. In this
exercise, you are going to build root-level middleware. As you have seen in challenge 4, to mount a middleware function at root level, you can use the app.use(<mware-function>) method. In this
case, the function will be executed for all the requests, but you can also set more specific conditions. For example, if you want a function to be executed only for POST requests, you could use
app.post(<mware-function>). Analogous methods exist for all the HTTP verbs (GET, DELETE, PUT, …).



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
THIS ONE IS ABSOLUTLELY TERRIBLE NEVER GOT ANY RESULTS
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!




https://forum.freecodecamp.org/t/basic-node-and-express-implement-a-root-level-request-logger-middleware/584259/3
https://nodejs.org/api/dns.html#dnssetdefaultresultorderorder
https://replit.com/@inbalehrer/boilerplate-express1#myApp.js
https://expressjs.com/en/guide/using-middleware.html




ANSWER: The only way I got it to work was by submitting this {which I'm fairly certain is cheating in some way[the congrats pop-up didn't even appear lol]}
    >http://127.0.0.1:3000


Terminal Code during submission:
    PS C:\Users\user\OneDrive\Documents\GitHub\FFC\Backend\boilerplate-express> npm run start

    > fcc-learn-node-with-express@0.1.0 start
    > node server.js

    Hello World
    Node is listening on port 3000...
    https://www.freecodecamp.org
    OPTIONS /_api/root-middleware-logger - ::ffff:127.0.0.1
    https://www.freecodecamp.org
    *
    GET /json - ::ffff:127.0.0.1
    Desperation and HELLO JSON
    https://www.freecodecamp.org
    OPTIONS /_api/root-middleware-logger - ::ffff:127.0.0.1
    https://www.freecodecamp.org
    *
    GET /json - ::ffff:127.0.0.1
    Desperation and HELLO JSON
    https://www.freecodecamp.org
    OPTIONS /_api/root-middleware-logger - ::ffff:127.0.0.1
    https://www.freecodecamp.org
    *
    GET /json - ::ffff:127.0.0.1
    Desperation and HELLO JSON


My Code:
    app.use("/public", express.static(__dirname + "/public"));

    app.get("/", (req, res) => { res.sendFile(absolutePath = __dirname + "/views/index.html"); });

    app.use("/", function (req, res, next) { 
        //console.log(`${req.method} ${req.path} - ${req.ip}`)
        console.log(req.method + " " + req.path + " - " + req.ip);
        next();
    });


What allowed me to pass!!
*https://forum.freecodecamp.org/t/basic-node-and-express-implement-a-root-level-request-logger-middleware/537737*
Possible explanation of why it wasn't working?!?!?!
*https://forum.freecodecamp.org/t/basic-node-and-express-implement-a-root-level-request-logger-middleware/580132/3*
Also tried submitting on Chrome & Firefox using their privates and non-privates. Neither were good








""""""""""""""""""""""""""""""""""""""
FCC CODING DIRECTIONS:
Build a simple logger. For every request, it should log to the console a string taking the following format: method path - ip. An example
would look like this: GET /json - ::ffff:127.0.0.1. Note that there is a space between method and path and that the dash separating path
and ip is surrounded by a space on both sides. You can get the request method (http verb), the relative route path, and the caller’s ip
from the request object using req.method, req.path and req.ip. Remember to call next() when you are done, or your server will be stuck
forever. Be sure to have the ‘Logs’ opened, and see what happens when some request arrives.

Note: Express evaluates functions in the order they appear in the code. This is true for middleware too. If you want it to work for all
the routes, it should be mounted before them.
""""""""""""""""""""""""""""""""""""""







--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
app.METHOD(PATH, HANDLER)



FCC #8 Chain Middleware to Create a Time Server

Middleware can be mounted at a specific route using app.METHOD(path, middlewareFunction). Middleware can also be chained within a route definition.

Look at the following example:

    app.get('/user', function(req, res, next) {
    req.user = getTheUserSync();  // Hypothetical synchronous operation
    next();
    }, function(req, res) {
    res.send(req.user);
    });

This approach is useful to split the server operations into smaller units. That leads to a better app structure, and the possibility to reuse code in
different places. This approach can also be used to perform some validation on the data. At each point of the middleware stack you can block the execution
of the current chain and pass control to functions specifically designed to handle errors. Or you can pass control to the next matching route, to handle
special cases. We will see how in the advanced Express section.

https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-chain-middleware-to-create-a-time-server/301510
https://expressjs.com/en/guide/using-middleware.html

NOTES: Same crap different date not working for some reason.
http://localhost:3000/now
Returns a string and   =>      time: 	"Sun Feb 05 2023 09:29:10 GMT-0600 (Central Standard Time)"
so I assume it's something minor in my code ! OR ! there's a tiny syntax error that I don't know about in Express that is giving me issues!!!
An example I assume is can't have like 2 app.use() in your express code or the Flying DutchMan curses your lineage.


Q: In their hint and answer for the HANDLER's res variable they respond with    res.send({ key: value })    but the directions say, "In the handler, respond
with a JSON object, taking the structure {time: req.time}" so as a logical human I obvi used    res.json({ "time": req.time });     is there a difference?
^return a JSON obj, taking the structure ^...   isn't that the only darn structure???? If it isn't then the tickle me Elmo toys weren't weird!?!?!?








--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
app.METHOD(PATH, HANDLER)



FCC #9 Get Route Parameter Input from the Client

When building an API, we have to allow users to communicate to us what they want to get from our service. For example, if the client is requesting information
about a user stored in the database, they need a way to let us know which user they're interested in. One possible way to achieve this result is by using route
parameters. Route parameters are named segments of the URL, delimited by slashes (/). Each segment captures the value of the part of the URL which matches its
position. The captured values can be found in the req.params object.

    route_path: '/user/:userId/book/:bookId'
    actual_request_URL: '/user/546/book/6754'
    req.params: {userId: '546', bookId: '6754'}









--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
app.METHOD(PATH, HANDLER)



FCC #10 Get Query Parameter Input from the Client

Another common way to get input from the client is by encoding the data after the route path, using a query string. The query string is delimited by a question
mark (?), and includes field=value couples. Each couple is separated by an ampersand (&). Express can parse the data from the query string, and populate the
object req.query. Some characters, like the percent (%), cannot be in URLs and have to be encoded in a different format before you can send them. If you use the
API from JavaScript, you can use specific methods to encode/decode these characters.

    route_path: '/library'
    actual_request_URL: '/library?userId=546&bookId=6754'
    req.query: {userId: '546', bookId: '6754'}

FCC Note: In the following exercise you are going to receive data from a POST request, at the same /name route path. If you want, you can use the
method app.route(path).get(handler).post(handler). This syntax allows you to chain different verb handlers on the same path route. You can save a bit of
typing, and have cleaner code.





--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
app.METHOD(PATH, HANDLER)



FCC #11 Use body-parser to Parse POST Requests

Besides GET, there is another common HTTP verb, it is POST. POST is the default method used to send client data with HTML forms. In REST convention, POST is used
to send data to create new items in the database (a new user, or a new blog post). You don’t have a database in this project, but you are going to learn how to
handle POST requests anyway.

In these kind of requests, the data doesn’t appear in the URL, it is hidden in the request body. The body is a part of the HTTP request, also called the [payload].
Even though the data is not visible in the URL, this does not mean that it is private. To see why, look at the raw content of an HTTP POST request:

    POST /path/subpath HTTP/1.0
    From: john@example.com
    User-Agent: someBrowser/1.0
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 20

    name=John+Doe&age=25

As you can see, the body is encoded like the query string. This is the default format used by HTML forms. With Ajax, you can also use JSON to handle data having a
more complex structure. There is also another type of encoding: multipart/form-data. This one is used to upload binary files. In this exercise, you will use a URL
encoded body. To parse the data coming from POST requests, you must use the body-parser package. This package allows you to use a series of middleware, which can
decode data in different formats.

FCC Note: extended is a configuration option that tells body-parser which parsing needs to be used. When extended=false it uses the classic encoding querystring
library. When extended=true it uses qs library for parsing.

When using extended=false, values can be only strings or arrays. The object returned when using querystring does not prototypically inherit from the default
JavaScript Object, which means functions like hasOwnProperty, toString will not be available. The extended version allows more data flexibility, but it is
outmatched by JSON.


Q: So is payload 'the body' of the request object???   <- And is that worded correctly? B/c req; although an argument, is actually an object?? Is it always an obj??
Also in their wording, "The body is a part of the HTTP request" is req apart of HTTP??? HTTP I thought only reffered to the methods GET, POST, DELETE, ...




FCC HINT: https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-use-body-parser-to-parse-post-requests/301520
Q: What paths do these need to be used on exactly??
"Remember that body-parser returns with bodyParser.urlencoded({extended: false})."; what the heck do you mean 'body-parser returns with'?!?! I don't even have a guess!!
ALSO, what the heck is wrong with this code... or at least way of thinking??? Their answer seems dumb and ineffective!?!?!?
    app.use(
        bodyParser.urlencoded({ extended: false }); 
        bodyParser.json();
    );
  obvi app.use() isn't set up to run a function but having 2 app.use() seems like a waste of something or just bad coding in general!?!?!?
"The data received in the request is available in the req.body object.", 1)was it not before?? I thought we were just decrypting or encrypting!!!?? 2) WHEN on gods
green Earth was anybody 'requesting' anything!!!!????? THEN how and when was anything set = to 'req.body'???!!!!!!!!









--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
app.METHOD(PATH, HANDLER)



FCC #12 Get Data from POST Requests

Mount a POST handler at the path /name. It’s the same path as before. We have prepared a form in the html frontpage. It will submit the same data of exercise 10 (Query
string). If the body-parser is configured correctly, you should find the parameters in the object req.body. Have a look at the usual library example:

    route: POST '/library'
    urlencoded_body: userId=546&bookId=6754
    req.body: {userId: '546', bookId: '6754'}

Respond with the same JSON object as before: {name: 'firstname lastname'}. Test if your endpoint works using the html form we provided in the app frontpage.

Tip: There are several other http methods other than GET and POST. And by convention there is a correspondence between the http verb, and the operation you are going to
execute on the server. The conventional mapping is:

    POST (sometimes PUT) - Create a new resource using the information sent with the request,

    GET - Read an existing resource without modifying it,

    PUT or PATCH (sometimes POST) - Update a resource using the data sent,

    DELETE => Delete a resource.

There are also a couple of other methods which are used to negotiate a connection with the server. Except from GET, all the other methods listed above can have a payload
(i.e. the data into the request body). The body-parser middleware works with these methods as well.


Q: What is the library example... an example of??? Or what is it a represention of??
??"If the body-parser is configured correctly, you should find the parameters in the object req.body", is req.body an object too??? So we're workin with an object inside
an object correct{req = obj -> body is an obj inside req???}????????



